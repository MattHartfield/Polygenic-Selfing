// 22nd October 2019
// Modification of recipes 13.2, 13.5
// Polygenic selection under selfâ€“fertilisation, with multiple traits under selection

// Function for calculating gaussian fitness function for multiple traits
function (f)gaussfit(float z, float z0, float vs){
	fitout = exp(-(0.5)*sum(((z-z0)^2/(vs))));
	return fitout;
}

initialize() {
	
	// Set seed
	theseed = rdunif(1,0,asInteger(2^62)-1);
	catn("New random seed is " + theseed);
	setSeed(theseed);
	
	defineConstant("N",5000);				// Population size
	defineConstant("QTLf",0.1);			// Fraction of QTL mutations in g2
	defineConstant("genl",25000000);		// Length of simulated genome
	defineConstant("msd",0.25);			// Standard Deviation in trait values
	
//		Uncomment if running on home machine; comment out otherwise
//		defineConstant("s",0.00);				// Background mutation selection coefficient
//		defineConstant("h",0.02);				// Background mutation dominance coefficient
//		defineConstant("sfrate",0.0);			// Self-fertilisation rate
//		defineConstant("nt",1); 				// Number of traits to optimise
//		defineConstant("rep",1);				// Which replicate is running
//		defineConstant("runtime",500);		// How many generations (+1) to run for after optimum shift
//		defineConstant("isnm",0);				// 0 = mutation continues after optimum shift; 1 = mutation stopped
//		defineConstant("stype",0);				// Shift type. 0 = Sudden shift, 1 = gradual shift
//		defineConstant("oc_sc",0);				// Scale outcrossing parameters? 0 = no, 1 = yes, 2 = low mut, rec rates
//		defineConstant("isloc",1);				// 'Is local machine', for printing to computer
	
	// Defining where to print stats out to, depending on code location
	if( exists("isloc") )
	{
		defineConstant("fname",paste0(c("/Users/hartfield/Documents/Polygenic Selection Selfing/SLiM Scripts/polyself_out_s",s,"_h",h,"_self",sfrate,"_nt",nt,"_msd",msd,"_isnm",isnm,"_stype",stype,"_ocsc",oc_sc,"_rep",rep,".dat")));
	}
	else
	{
		defineConstant("fname",paste0(c("/scratch/mhartfield/polyself_out/data/polyself_out_s",s,"_h",h,"_self",sfrate,"_nt",nt,"_msd",msd,"_isnm",isnm,"_stype",stype,"_ocsc",oc_sc,"_rep",rep,".dat")));
	}
	
	defineConstant("ShiftTime",4*N);
	defineConstant("MaxTime",4*N+runtime+1);
	defineConstant("newo",1/sqrt(nt));
	defineConstant("Rmsd",msd/sqrt(nt));			// Rescaled mutational variance depending on complexity
	defineConstant("mutvar",Rmsd*Rmsd);				// Mutational variance in covariance matrix (= sd^2)
	defineConstant("t1",round(0.04*runtime));		// Times when to sample haplotypes
	defineConstant("t2",round(0.3*runtime));
	
	initializeMutationType("m1", 0.5, "f", 0.0); 	 	// Neutral mutations
	initializeMutationType("m2", h, "f", s); 	 			// Selected background mutations
	initializeMutationType("m3", 0.5, "f", 0.0);  	 	// QTLs		
	m1.mutationStackPolicy = "l";
	m2.mutationStackPolicy = "l";
	m3.mutationStackPolicy = "l";
	m3.convertToSubstitution = F;
	m2.color="red";
	m3.color="blue";
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", c(m1,m2,m3), c(0.25, 1.0-0.25-QTLf,QTLf));
	// Building chromosome
	sp = 0;
	while(sp < genl)
	{
		initializeGenomicElement(g1, sp, sp + 3999);
		initializeGenomicElement(g2, sp + 4000, sp + 4999);
		sp = sp + 5000;
	}
	
	// Uncomment if using polygenic selection parameters
	mu = 4e-08;
	ATrec = (1-exp(-(2*3.6)/100))/(2e6);	// Recombination rate 3.6cM/Mb, converted using Haldane's formula
	rec =  mu/(7e-9/ATrec);
	// If activated, rescales parameters so equivalent to highly selfing = 0.999
	if(oc_sc == 1 & sfrate == 0){
		sft = 0.999;
		Fis = sft/(2-sft);
		Psi = (sft*(2+sft))/((4-sft)*(2-sft));
		mu = mu/(1 + Fis);
		rec = rec*(1 - 2*Fis + Psi);
	}
	else if(oc_sc == 2)		// Set OCSC to 2 for special case; mu, rec reduced 10-fold (for HoC diagnostic plot)
	{
		mu = mu*0.1;
		rec = rec*0.1;
	}
	
	// Uncomment if using testing values
	//	mu = 1e-8;
	//	rec = 1e-9;
	
	initializeMutationRate(mu);
	initializeRecombinationRate(rec);
	
	// Setting up multivariate trait matrix
	defineConstant("QTL_mean",rep(0.0,nt));
	defineConstant("QTL_io",rep(0.0,nt));			// Initial optimum (0 for all traits)
	defineConstant("QTL_so",rep(newo,nt));			// Max shifted optimum value
	defineConstant("QTL_V",mutvar);					// Variance in mutational effects
	defineConstant("QTL_CV",0.0);						// Co-variance in mutational effects
	
	// Setting up array to be used to define QTL covariance matrix
	mat_ent = rep(QTL_CV,nt*nt);
	for (i in 1:nt)
	{
		ent = 0.0 + (i-1)*(nt+1);
		mat_ent[ent] = QTL_V;
	}
	defineConstant("QTL_matrix",matrix(mat_ent,nrow=nt));
	print(QTL_matrix);
}

// Calculating fitness contributed by QTLs
fitness(NULL)
{
	phens = rep(0.0,nt);
	mQTL = individual.genomes.mutationsOfType(m3);
	if(size(mQTL) != 0){
		for(i in 1:nt)
		{
			phens[(i-1)] = sum(mQTL.getValue(paste0(c("e",(i-1)))));
		}
	}
	
	// Fitness scaling of QTLs based on Gaussian function with selection variance = 1
	if(sim.generation < ShiftTime)
	{
		return gaussfit(phens,QTL_io,rep(1.0,nt));
	}
	else if(sim.generation >= ShiftTime)
	{
		return gaussfit(phens,sim.getValue('scf')*QTL_so,rep(1.0,nt));
	}
}

// Defining selection coefficient of QTL mutations using MVN setup (in base population)
mutation(m3,p1)
{
	if(nt > 1)
	{
		effects = rmvnorm(1,QTL_mean,QTL_matrix);
		for(i in 1:nt)
		{
			mut.setValue( paste0(c("e",(i-1))) , effects[i-1]);
		}
	}
	else if (nt == 1)
	{
		effects = rnorm(1,QTL_mean,Rmsd);		// note rnorm uses sd of effects
		mut.setValue( "e0" , effects);
	}
	return T;
}

// Supressing mutation in p2, p3 (subpops in which inbreeding depression is measured)
mutation(m1,p2)
{
	return F;
}
mutation(m2,p2)
{
	return F;
}
mutation(m3,p2)
{
	return F;
}
mutation(m1,p3)
{
	return F;
}
mutation(m2,p3)
{
	return F;
}
mutation(m3,p3)
{
	return F;
}

// Code to define fitness changes due to QTLs
late () {
	
	if (sim.generation % sim.getValue('p2time') == 0){
		catn("Generation number " + sim.generation);
	}
	
	if (sim.generation == ShiftTime & ShiftTime != 1){
		catn("Optimum shift at generation " + sim.generation);
	}
	
	// Print out VCF stats of 50 individuals, along with QTL positions, for calculating haplotype statistics
	if( (sim.generation == (ShiftTime - 1)) | (sim.generation == (ShiftTime + t1)) | (sim.generation == (ShiftTime + t2)) | (sim.generation == (ShiftTime + runtime)) )
	{
		
		// Printout folder, depending on local machine or not
		if( exists("isloc") )
		{
			ftext = "/Users/hartfield/Documents/Polygenic Selection Selfing/SLiM scripts/VCFout/VCFout_test_";
		}
		else
		{
			ftext = paste0(c("/scratch/mhartfield/polyself_out/haps/polyself_out_s",s,"_h",h,"_self",sfrate,"_nt",nt,"_msd",msd,"_isnm",isnm,"_stype",stype,"_ocsc",oc_sc,"_"));
		}
		
		// File suffix
		if( (sim.generation == (ShiftTime - 1)) )
		{
			stext = "time0";
		}
		else if( (sim.generation == (ShiftTime + t1)) )
		{
			stext = "time1";
		}
		else if( (sim.generation == (ShiftTime + t2)) )
		{
			stext = "time2";
		}
		else if( (sim.generation == (ShiftTime + runtime)) )
		{
			stext = "time3";
		}
		
		// Write VCF file
		p1.outputVCFSample(50,replace=F,outputMultiallelics=F,filePath=paste0(c(ftext,stext,"_rep",rep,".vcf")));
		
		// Print table of all QTL positions and effect sizes
		qtlm = sim.mutationsOfType(m3);
		lh = c("POS","FREQ");
		for(i in 1:nt)
		{
			lh = c(lh,paste0(c("QTL",i)));
		}
		lh = c(lh,"MeanQTL");
		writeFile(paste0(c(ftext,stext,"_rep",rep,".info")),paste(lh,sep=" "),append=F);
		for(qt in qtlm)
		{
			l2 = format("%d",(qt.position + 1));
			l2 = c(l2,sim.mutationFrequencies(p1,qt));
			qtm = 0;
			for(i in 1:nt)
			{
				l2 = c(l2,qt.getValue(paste0(c("e",(i-1)))));
				qtm = qtm + qt.getValue(paste0(c("e",(i-1))));
			}
			l2 = c(l2,(qtm/nt));
			writeFile(paste0(c(ftext,stext,"_rep",rep,".info")),paste(l2),append=T);
		}
	}
}

// Outputting key statistics every 200 generations (or every 10 just after optimum shift)
// (Note increase from 100 gen printouts to 200 gens with increase in burn-in)
early () {
	
	if(sim.generation == 1 & ShiftTime != 1)
	{
		sim.setValue('ptime',200);
		sim.setValue('p2time',1000);
		catn("Printout now every " + sim.getValue('ptime') + " generations.");
	}
	
	if( (sim.generation >= ShiftTime) & (sim.generation <= ShiftTime + 99) )
	{
		if(sim.generation == ShiftTime)
		{
			sim.setValue('ptime',10);
			sim.setValue('p2time',50);
			catn("Printout now every " + sim.getValue('ptime') + " generations.");
			// Turn off mutation rate after optimum shift, if option set
			if(isnm == 1)
			{
				sim.chromosome.setMutationRate(0.0);
			}
			// Set scaling factor at 1 if sudden optimum shift
			if(stype == 0)
			{
				sim.setValue('scf',1);
			}
		}
		
		// Set scaling factor if gradual shift
		if(stype == 1)
		{
			sim.setValue('scf',(sim.generation - ShiftTime + 1)/100);
		}
	
	}
	
	if ((sim.generation % sim.getValue('ptime') == 0 & sim.generation >= (0.1*ShiftTime) & sim.generation != 1) | ( ShiftTime==1 & sim.generation==2 ) ){
		// Splitting off subpopulations, for measuring inbreeding depression
		sim.addSubpopSplit("p2",500,p1);
		sim.addSubpopSplit("p3",500,p1);
		p2.setSelfingRate(0.0);
		p3.setSelfingRate(1.0);
	}
	
	if ( (sim.generation % sim.getValue('ptime') == 1 & sim.generation >= (0.1*ShiftTime) & sim.generation != 1) | ( ShiftTime==1 & sim.generation==3 ) ){
		cumphen = rep(0.0,nt);			// Cumulative phenotype (for mean)
		cumphensq = rep(0.0,nt);		// Cumulative square of phenotype (for variance)
		cumfit = 0.0;						// Cumulative fitness (for mean)
		cumfitsq = 0.0;					// Cumulative square of fitness (for genetic variance)
		genvar = rep(0.0,nt);			// Genic variance
		ibvar = rep(0.0,nt);				// Inbred variance
		fixeff = rep(0.0,nt);			// Mean QTL effects of mutants that fix
		proppos = rep(0.0,nt);			// Proportion of QTLs with +ve effects
		fepos = rep(0.0,nt);				// Mean QTL effects of fixed *positive* mutations
		
		// QTL loci
		phens = rep(0.0,nt);
		for (ind in p1.individuals)
		{
			mQTL = ind.genomes.mutationsOfType(m3);
			if(size(mQTL) != 0){
				for(i in 1:nt)
				{
					phens[(i-1)] = sum(mQTL.getValue(paste0(c("e",(i-1)))));
					cumphen[(i-1)] = cumphen[(i-1)] + phens[(i-1)];
					cumphensq[(i-1)] = cumphensq[(i-1)] + (phens[(i-1)])^2;
				}
			}
		}
		
		qtls = sim.mutationsOfType(m3);
		qtlf = sim.mutationFrequencies(p1,qtls);
		fmuts = sum(qtlf == 1.0);
		line = paste(c(sim.generation, mean(p1.cachedFitness(NULL)), var(p1.cachedFitness(NULL)), fmuts));
		
		// Measuring inbreeding depression, deleting subpopulations
		id = 1.0 - (mean(p3.cachedFitness(NULL))/mean(p2.cachedFitness(NULL)));
		line = c(line,id);
		p2.setSubpopulationSize(0);
		p3.setSubpopulationSize(0);
		
		for(i in 1:nt)
		{
			if(size(qtls) != 0)
			{
				// Calculating genetic variance
				qtle = qtls.getValue(paste0(c("e",(i-1))));
				genvar[(i-1)] = sum(2*qtlf*(1.0-qtlf)*qtle*qtle);
				ibvar[(i-1)] = 0;
				
				// Code adapted from recipe 14.4 for calculating inbred variance
				for (mq in qtls)
				{
					mqf = sapply(p1.individuals, paste0(c("sum(applyValue.genomes.containsMarkerMutation(m3, ",mq.position,"));")));
					mqe = mq.getValue(paste0(c("e",(i-1))));
					f00=sum(mqf==0)/N;
					f11=sum(mqf==2)/N;
					f01=sum(mqf==1)/N;
					ibvar[(i-1)] = ibvar[(i-1)] + (2*f00*f11-(1/2)*f01^2)*mqe*mqe;		
				}
				
				if(size(qtle[which(qtlf==1.0)]) == 0)
				{
					fixeff[(i-1)] = NAN;
					proppos[(i-1)] = NAN;
					fepos[(i-1)] = NAN;
				}
				else
				{
					fixeff[(i-1)] = mean(qtle[which(qtlf==1.0)]);
					proppos[(i-1)] = size(qtle[which(qtlf==1.0 & qtle>0.0)])/size(qtle[which(qtlf==1.0)]);
					if(size(qtle[which(qtlf==1.0 & qtle>0.0)]) > 0)
					{
						fepos[(i-1)] = mean(qtle[which(qtlf==1.0 & qtle>0.0)]);
					}
					else
					{
						fepos[(i-1)] = NAN;
					}
				}
			}
			else
			{
				genvar[(i-1)] = 0.0;
				ibvar[(i-1)] = 0.0;
				fixeff[(i-1)] = NAN;
				proppos[(i-1)] = NAN;
				fepos[(i-1)] = NAN;
			}
			
			// Printing out mean individual phenotype; variance in indv phenotype; population genetic variance
			mti = cumphen[(i-1)]/N;
			vti = (cumphensq[(i-1)]/N) - ((cumphen[(i-1)]/N)^2);
			line = c(line,mti);
			line = c(line,vti);
			line = c(line,genvar[(i-1)]);
			line = c(line,ibvar[(i-1)]);
			line = c(line,vti-genvar[(i-1)]-ibvar[(i-1)]);	// Residual variance is LD covariance			
			line = c(line,fixeff[(i-1)]);
			line = c(line,proppos[(i-1)]);
			line = c(line,fepos[(i-1)]);
		}
		
		// Outputting statistics
		writeFile(fname, paste(line), append=T);
	}
}

1 {
	// Set up population size and printouts
	sim.addSubpop("p1", N);
	p1.setSelfingRate(sfrate);
	line = c("Generation", "MeanFitness", "VarFitness", "FixedMuts","InbreedingDepression");
	for(i in 1:nt)
	{
		line = c(line,paste0(c("MeanTrait",i)));
		line = c(line,paste0(c("GeneticVar",i)));
		line = c(line,paste0(c("GenVar",i)));
		line = c(line,paste0(c("InbredVar",i)));
		line = c(line,paste0(c("LDVar",i)));
		line = c(line,paste0(c("MeanFixedQTL",i)));
		line = c(line,paste0(c("PropPosQTL",i)));
		line = c(line,paste0(c("MeanPosQTL",i)));
	}
	writeFile(fname, paste(line), append=F);
	sim.rescheduleScriptBlock(s1,MaxTime,MaxTime);
	sim.setValue('hasfixed',0);
}

// To be run after 'MaxTime' generations: terminate simulation 
s1 10 late() {
	catn( MaxTime + " generations elapsed, end of simulation.");
	sim.simulationFinished();
}

// EOF